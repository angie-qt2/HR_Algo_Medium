using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'equal' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static int equal(List<int> arr)
    {
        int min = arr[0];
        for (int i = 1; i < arr.Count; i++)
        {
            if (arr[i] < min)
                min = arr[i];
        }

        int best = int.MaxValue;

        for (int baseVal = min; baseVal >= min - 4; baseVal--)
        {
            int steps = 0;

            for (int i = 0; i < arr.Count; i++)
            {
                int diff = arr[i] - baseVal;

                steps += diff / 5;
                diff %= 5;

                steps += diff / 2;
                diff %= 2;

                steps += diff;
            }

            if (steps < best)
                best = steps;
        }

        return best;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<int> arr = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(arrTemp => Convert.ToInt32(arrTemp)).ToList();

            int result = Result.equal(arr);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
