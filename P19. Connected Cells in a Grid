using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'connectedCell' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY matrix as parameter.
     */
    
    static int[] dx = { -1, -1, -1, 0, 0, 1, 1, 1 };
    static int[] dy = { -1, 0, 1, -1, 1, -1, 0, 1 };
    
    public static int connectedCell(List<List<int>> matrix)
    {
        int rows = matrix.Count;
        int cols = matrix[0].Count;
        bool[,] visited = new bool[rows, cols];

        int maxRegion = 0;

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                if (matrix[i][j] == 1 && !visited[i, j])
                {
                    int regionSize = dfs(matrix, visited, i, j);
                    if (regionSize > maxRegion)
                        maxRegion = regionSize;
                }
            }
        }

        return maxRegion;
    }
    
    private static int dfs(List<List<int>> matrix, bool[,] visited, int row, int col)
    {
        int rows = matrix.Count;
        int cols = matrix[0].Count;

        visited[row, col] = true;
        int count = 1; 

        for (int k = 0; k < 8; k++)
        {
            int newRow = row + dx[k];
            int newCol = col + dy[k];

            if (isValid(matrix, visited, newRow, newCol))
            {
                count += dfs(matrix, visited, newRow, newCol);
            }
        }

        return count;
    }
    
    private static bool isValid(List<List<int>> matrix, bool[,] visited, int r, int c)
    {
        int rows = matrix.Count;
        int cols = matrix[0].Count;

        return (r >= 0 && r < rows &&
                c >= 0 && c < cols &&
                matrix[r][c] == 1 &&
                !visited[r, c]);
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        int m = Convert.ToInt32(Console.ReadLine().Trim());

        List<List<int>> matrix = new List<List<int>>();

        for (int i = 0; i < n; i++)
        {
            matrix.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(matrixTemp => Convert.ToInt32(matrixTemp)).ToList());
        }

        int result = Result.connectedCell(matrix);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
