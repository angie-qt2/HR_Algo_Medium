using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'initialize' function below.
     *
     * The function accepts STRING s as parameter.
     */

    const int MOD = 1000000007;
    static int[,] prefix; // prefix[i][ch] = count of char ch up to index i
    static int n;
    public static void initialize(string s)
    {
    // This function is called once before all queries.
     n = s.Length;
        prefix = new int[n + 1, 26];

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < 26; j++)
                prefix[i + 1, j] = prefix[i, j];
            
            prefix[i + 1, s[i] - 'a']++;
        }
    }

    /*
     * Complete the 'answerQuery' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER l
     *  2. INTEGER r
     */

    public static int answerQuery(int l, int r)
    {
        l--; r--;

        int[] freq = new int[26];
        for (int i = 0; i < 26; i++)
            freq[i] = prefix[r + 1, i] - prefix[l, i];

        long pairs = 0;
        long oddCount = 0;
        foreach (var f in freq)
        {
            pairs += f / 2;
            if (f % 2 == 1)
                oddCount++;
        }

        long result = fact(pairs);
        foreach (var f in freq)
        {
            if (f >= 2)
                result = (result * modInverse(fact(f / 2))) % MOD;
        }

        if (oddCount > 0)
            result = (result * oddCount) % MOD;

        return (int)result;
    }

    static long[] factCache = new long[100005];
    static bool factReady = false;

    static long fact(long n)
    {
        if (!factReady)
        {
            factCache[0] = 1;
            for (int i = 1; i < factCache.Length; i++)
                factCache[i] = (factCache[i - 1] * i) % MOD;
            factReady = true;
        }
        return factCache[n];
    }

    static long modInverse(long a)
    {
        return modPow(a, MOD - 2); 
    }

    static long modPow(long a, long p)
    {
        long res = 1;
        while (p > 0)
        {
            if ((p & 1) == 1)
                res = (res * a) % MOD;
            a = (a * a) % MOD;
            p >>= 1;
        }
        return res;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string s = Console.ReadLine();

        Result.initialize(s);

        int q = Convert.ToInt32(Console.ReadLine().Trim());

        for (int qItr = 0; qItr < q; qItr++)
        {
            string[] firstMultipleInput = Console.ReadLine().TrimEnd().Split(' ');

            int l = Convert.ToInt32(firstMultipleInput[0]);

            int r = Convert.ToInt32(firstMultipleInput[1]);

            int result = Result.answerQuery(l, r);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
